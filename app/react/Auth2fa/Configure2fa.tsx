/** @format */
// TEST!!!

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { LocalForm, Control } from 'react-redux-form';
import QRCode from 'qrcode.react';
// import { bindActionCreators } from 'redux';

import { RequestParams } from 'app/utils/RequestParams';
import { t } from 'app/I18N';
import Auth2faAPI from './Auth2faAPI';

type Configure2faProps = {
  user: { using2fa: boolean };
};

type State = {
  using2fa: boolean;
  otpauth: string;
  secret: string;
};

class Configure2fa extends Component<Configure2faProps, State> {
  static defaultProps: Configure2faProps;

  constructor(props: Configure2faProps) {
    super(props);
    this.state = {
      using2fa: props.user.using2fa || false,
      otpauth: '',
      secret: '',
    };
    this.getSecret = this.getSecret.bind(this);
  }

  async componentDidMount() {
    const { using2fa } = this.state;
    if (!using2fa) {
      await this.getSecret();
    }
  }

  async getSecret() {
    const { otpauth, secret } = await Auth2faAPI.getSecret(new RequestParams());
    this.setState({ otpauth, secret });
  }

  async handleSubmit() {
    console.log('submit!');
  }

  render() {
    const { using2fa, otpauth, secret } = this.state;

    return (
      <div className="configure2fa-settings">
        <div className="panel panel-default">
          <div className="panel-heading">{t('System', 'Two-step verification')}</div>
          <div className="panel-body">
            <div>
              <p>Activate this feature for enhanced account security</p>
              <h3>Using Google Authenticator</h3>
              <LocalForm onSubmit={this.handleSubmit}>
                <ol>
                  <li>Install the Google Authenticator app on your mobile device</li>
                  <li>Open the app and select &quot;Add Account&quot; (usually a plus symbol)</li>
                  <li>
                    Scan the following QR code selecting the &quot;scan barcode&quot; option:
                    <div className="qr-code">
                      {otpauth && (
                        <QRCode value={otpauth} level="Q" includeMargin={false} renderAs="svg" />
                      )}
                    </div>
                    Or enter this secret key into your Authenticator app
                    <br />
                    (please keep this key secret and don&#39;t share it):
                    <div className="secret-key">
                      <span>{secret}</span>
                    </div>
                  </li>
                  <li>
                    Enter the 6-digit verification code generated by your Authenticator app:
                    <br />
                    <div>
                      <Control.text model=".code" id="code" />
                    </div>
                  </li>
                </ol>
                <p>
                  <button type="button" className="btn btn-default">
                    Cancel
                  </button>
                  <input type="submit" className="btn btn-success" value="Confirm" />
                </p>
              </LocalForm>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

Configure2fa.defaultProps = {
  user: { using2fa: false },
};

export function mapStateToProps(state: any) {
  return { user: state.user.toJS() };
}

// function mapDispatchToProps(dispatch) {
//   return bindActionCreators(
//     { setUser: actions.set.bind(null, 'auth/user'), notify: notifyAction },
//     dispatch
//   );
// }

export default connect(mapStateToProps)(Configure2fa);
